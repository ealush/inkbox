{"version":3,"sources":["components/Typer/index.js","index.js"],"names":["MAX_CHAR_COUNT","MAX_STATE_SIZE","LINE_COUNT","MAX_PER_LINE","CHAR_HEIGHT","CHAR_WIDTH","explanation","padEnd","join","prompt","Typer","_useState","useState","chars","_useState2","Object","slicedToArray","stream","setStream","_useState3","length","_useState4","fadeAfter","setFadeAfter","useType","_ref$key","arguments","undefined","key","next","slice","toConsumableArray","concat","id","uniqueId","say","phrase","cb","Array","prototype","forEach","call","i","setTimeout","clearAll","_loop","document","body","addEventListener","useEffect","react_default","a","createElement","className","map","_ref2","lineNumber","Math","floor","style","transform","ReactDOM","render","components_Typer","getElementById"],"mappings":"2MAIMA,SAAiB,KACjBC,EAAkC,EAAjBD,EACjBE,EAAa,EACbC,EAAe,GACfC,EAAc,GACdC,EAAa,GAEbC,EAAc,CAChBC,iBAAO,6BAA8BJ,GACrCI,iBAAO,cAAeJ,GACtBI,iBAAO,2BAA4BJ,GACnCI,iBAAO,yBAA0BJ,IACnCK,KAAK,IAEDC,EAASF,iBAAO,gBAAiBJ,GAsFxBO,MApFf,WAAiB,IAAAC,EACeC,mBAAS,CAAEC,MAAO,KADjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNM,EADMH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAEqBP,mBAASN,EAAYc,QAF1CC,EAAAN,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENG,EAFMD,EAAA,GAEKE,EAFLF,EAAA,GAIPG,EAAU,WAAuB,IAAAC,GAAAC,UAAAN,OAAA,QAAAO,IAAAD,UAAA,GAAAA,UAAA,GAAP,IAAbE,WAAoB,IAAAH,EAAd,GAAcA,EACnC,GAAKG,EAAIR,UAAUQ,EAAIR,OAAS,GAAhC,CAIA,IAAIS,EAAOZ,EAEPY,EAAKhB,MAAMO,SAAWnB,IACtB4B,EAAKhB,MAAQgB,EAAKhB,MAAMiB,MAAM9B,EAAgBC,IAGlD4B,EAAKhB,MAALE,OAAAgB,EAAA,EAAAhB,CAAiBc,EAAKhB,OAAtBmB,OAAA,CAA6B,CAAEJ,MAAKK,GAAIC,wBACxChB,EAAUW,KAGRM,EAAM,SAACC,EAAQC,GACjBC,MAAMC,UAAUC,QAAQC,KAAKL,EAAQ,SAACR,EAAKc,GACvCC,WAAW,WACPnB,EAAQ,CAAEI,QAENc,IAAMN,EAAOhB,OAAS,GAAKiB,KAC3B,GAALK,MAYLE,EAAW,WACb,IADmB,IAAAC,EAAA,SACVH,GACLC,WAAW,YAEI,IAAPD,GACAzB,EAAOJ,MAAQ,GACfK,EAAUD,GAbtBM,EAAapB,GAEbgC,EAAI1B,EAAQ,WACRqC,SAASC,KAAKC,iBAAiB,QAASxB,MAahCD,EAAamB,IAElB,IAAMpB,EAAYoB,KAVhBA,EAAIpB,EAAWoB,IAAM,EAAGA,IAAKG,EAA7BH,IAoBb,OANAO,oBAAU,WACNN,WAAW,WACPR,EAAI7B,EAAasC,IAClB,OACJ,IAGCM,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVpC,EAAOJ,MAAMyC,IAAI,SAAAC,EAAYb,GAAM,IAC5BW,EADYzB,EAAgB2B,EAAhB3B,IAAKK,EAAWsB,EAAXtB,GAErB,GAAIhB,EAAOJ,MAAMO,OAASsB,EAAI1C,EAC1B,OAAO,KAGX,IAAMwD,EAAaC,KAAKC,MAAOhB,EAAIvC,EAAgBD,GAE/CyD,EAAQ,CACRC,UAAS,cAAA5B,OAAiBU,EAAIvC,EAAgBE,EAArC,mBAAA2B,OAAiEwB,EAAapD,EAA9E,QAOb,OAJIa,EAAOJ,MAAMO,OAASsB,EAAIpB,IAC1B+B,EAAY,UAGTH,EAAAC,EAAAC,cAAA,QAAMC,UAAWA,EAAWzB,IAAKK,EAAI0B,MAAOA,GAAQ/B,QC5F/EiC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAAUjB,SAASkB,eAAe","file":"static/js/main.a8318661.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { uniqueId, padEnd } from 'lodash';\nimport './style.scss';\n\nconst MAX_CHAR_COUNT = 155;\nconst MAX_STATE_SIZE = MAX_CHAR_COUNT * 2;\nconst LINE_COUNT = 5;\nconst MAX_PER_LINE = 31;\nconst CHAR_HEIGHT = 40;\nconst CHAR_WIDTH = 17;\n\nconst explanation = [\n    padEnd('You can always go forward.', MAX_PER_LINE),\n    padEnd('Never back.', MAX_PER_LINE),\n    padEnd('Everything is temporary.', MAX_PER_LINE),\n    padEnd('Nothing lasts forever.', MAX_PER_LINE)\n].join('');\n\nconst prompt = padEnd('Start typing:', MAX_PER_LINE);\n\nfunction Typer() {\n    const [stream, setStream] = useState({ chars: [] });\n    const [fadeAfter, setFadeAfter] = useState(explanation.length);\n\n    const useType = ({ key = '' } = {}) => {\n        if (!key.length || key.length > 1) {\n            return;\n        }\n\n        let next = stream;\n\n        if (next.chars.length === MAX_STATE_SIZE) {\n            next.chars = next.chars.slice(MAX_CHAR_COUNT, MAX_STATE_SIZE);\n        }\n\n        next.chars = [...next.chars, { key, id: uniqueId() }];\n        setStream(next)\n    }\n\n    const say = (phrase, cb) => {\n        Array.prototype.forEach.call(phrase, (key, i) => {\n            setTimeout(() => {\n                useType({ key });\n\n                if (i === phrase.length - 1) { cb(); }\n            }, i *  50);\n        });\n    }\n\n    const showPrompt = () => {\n        setFadeAfter(MAX_PER_LINE);\n\n        say(prompt, () => {\n            document.body.addEventListener('keyup', useType);\n        });\n    }\n\n    const clearAll = () => {\n        for (let i = fadeAfter; i >= -1; i--) {\n            setTimeout(() => {\n\n                if (i === -1) {\n                    stream.chars = [];\n                    setStream(stream);\n                    showPrompt();\n                } else {\n                    setFadeAfter(i);\n                }\n            }, 50 * (fadeAfter - i));\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            say(explanation, clearAll);\n        }, 1500);\n    }, []);\n\n    return (\n        <main>\n            <div className=\"content\">\n                {stream.chars.map(({key, id}, i) => {\n                    let className;\n                    if (stream.chars.length - i > MAX_CHAR_COUNT) {\n                        return null;\n                    }\n\n                    const lineNumber = Math.floor((i / MAX_PER_LINE) % LINE_COUNT);\n\n                    let style = {\n                        transform: `translateX(${(i % MAX_PER_LINE) * CHAR_WIDTH}px) translateY(${lineNumber * CHAR_HEIGHT}px)`\n                    };\n\n                    if (stream.chars.length - i > fadeAfter) {\n                        className = 'hidden'\n                    }\n\n                    return <span className={className} key={id} style={style}>{key}</span>;\n                })}\n            </div>\n        </main>\n    );\n}\n\nexport default Typer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Typer from './components/Typer';\n\nReactDOM.render(<Typer/>, document.getElementById('root'));"],"sourceRoot":""}