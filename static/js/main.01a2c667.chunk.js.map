{"version":3,"sources":["components/Typer/index.js","index.js"],"names":["convert","oldMin","oldMax","newMin","newMax","oldValue","MAX_CHAR_COUNT","LINE_COUNT","MAX_PER_LINE","CHAR_HEIGHT","CHAR_WIDTH","FADE_OUT_AFTER","Typer","_useState","useState","_useState2","Object","slicedToArray","stream","setStream","handleType","_ref$key","arguments","length","undefined","key","splice","push","id","uniqueId","useEffect","document","body","addEventListener","react_default","a","createElement","className","map","_ref2","i","lineNumber","Math","floor","style","transform","concat","ReactDOM","render","components_Typer","getElementById"],"mappings":"oMAIMA,SAAU,SAACC,EAAQC,EAAQC,EAAQC,EAAQC,GAAjC,OACTA,EAAWJ,IAAWG,EAASD,IAAYD,EAASD,GAAWE,IAGhEG,EAAiB,IACjBC,EAAa,EACbC,EAAe,GACfC,EAAc,GACdC,EAAa,KACbC,EAAiB,IAkDRC,MAhDf,WAAiB,IAAAC,EACeC,mBAAS,IADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACEI,EADFJ,EAAA,GAGb,SAASK,IAA8B,IAAAC,GAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,IAAbG,WAAiB,IAAAJ,EAAX,GAAWA,GAC9BI,EAAIF,QAAUE,EAAIF,OAAS,IAI5BL,EAAOK,OAASjB,IAAmB,GACnCY,EAAOQ,OAAO,EAAGR,EAAOK,OAASjB,GAGrCY,EAAOS,KAAK,CAACF,MAAKG,GAAIC,uBAGtBV,EAAUD,IAOd,OAJAY,oBAAU,WACNC,SAASC,KAAKC,iBAAiB,QAASb,IACzC,EAAC,IAGAc,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVnB,EAAOoB,IAAI,SAAAC,EAAYC,GAAM,IACtBH,EADMZ,EAAgBc,EAAhBd,IAAKG,EAAWW,EAAXX,GAEf,GAAIV,EAAOK,OAASiB,EAAIlC,EACpB,OAAO,KAGX,IAAMmC,EAAaC,KAAKC,MAAM3C,EAAQ,EAAGM,EAAgB,EAAGC,EAAYiC,IAEpEI,EAAQ,CACRC,UAAS,cAAAC,OAAiBN,EAAIhC,EAAgBE,EAArC,mBAAAoC,OAAiEL,EAAahC,EAA9E,QAOb,OAJIS,EAAOK,OAASiB,EAAI7B,IACpB0B,EAAY,UAGTH,EAAAC,EAAAC,cAAA,QAAMC,UAAWA,EAAWZ,IAAKG,EAAIgB,MAAOA,GAAQnB,QCnD/EsB,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAAUlB,SAASmB,eAAe","file":"static/js/main.01a2c667.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { uniqueId } from 'lodash';\nimport './style.scss';\n\nconst convert = (oldMin, oldMax, newMin, newMax, oldValue) => (\n    (((oldValue - oldMin) * (newMax - newMin)) / (oldMax - oldMin)) + newMin\n);\n\nconst MAX_CHAR_COUNT = 155;\nconst LINE_COUNT = 5;\nconst MAX_PER_LINE = 31;\nconst CHAR_HEIGHT = 27;\nconst CHAR_WIDTH = 16.2;\nconst FADE_OUT_AFTER = 100;\n\nfunction Typer() {\n    const [stream, setStream] = useState([]);\n\n    function handleType({ key = '' } = {}) {\n        if (!key.length || key.length > 1) {\n            return;\n        }\n\n        if (stream.length % MAX_CHAR_COUNT === 0) {\n            stream.splice(0, stream.length - MAX_CHAR_COUNT);\n        }\n\n        stream.push({key, id: uniqueId() });\n\n\n        setStream(stream);\n    }\n\n    useEffect(() => {\n        document.body.addEventListener('keyup', handleType);\n    }, [false]);\n\n    return (\n        <main>\n            <div className=\"content\">\n                {stream.map(({key, id}, i) => {\n                    let className;\n                    if (stream.length - i > MAX_CHAR_COUNT) {\n                        return null;\n                    }\n\n                    const lineNumber = Math.floor(convert(0, MAX_CHAR_COUNT, 0, LINE_COUNT, i));\n\n                    let style = {\n                        transform: `translateX(${(i % MAX_PER_LINE) * CHAR_WIDTH}px) translateY(${lineNumber * CHAR_HEIGHT}px)`\n                    };\n\n                    if (stream.length - i > FADE_OUT_AFTER) {\n                        className = 'hidden'\n                    }\n\n                    return <span className={className} key={id} style={style}>{key}</span>;\n                })}\n            </div>\n        </main>\n    );\n}\n\nexport default Typer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Typer from './components/Typer';\n\nReactDOM.render(<Typer/>, document.getElementById('root'));"],"sourceRoot":""}