{"version":3,"sources":["components/Typer/index.js","index.js"],"names":["explanation","prompt","convert","oldMin","oldMax","newMin","newMax","oldValue","MAX_CHAR_COUNT","LINE_COUNT","MAX_PER_LINE","CHAR_HEIGHT","CHAR_WIDTH","FADE_OUT_AFTER","Typer","_useState","useState","chars","_useState2","Object","slicedToArray","stream","setStream","_useState3","length","_useState4","fadeAfter","setFadeAfter","useType","_ref$key","arguments","undefined","key","next","slice","toConsumableArray","concat","id","uniqueId","say","phrase","cb","Array","prototype","forEach","call","i","setTimeout","clearAll","_loop","document","body","addEventListener","useEffect","react_default","a","createElement","className","map","_ref2","lineNumber","Math","floor","style","transform","ReactDOM","render","components_Typer","getElementById"],"mappings":"2MAIMA,SAAc,uHACdC,EAAS,kCAETC,EAAU,SAACC,EAAQC,EAAQC,EAAQC,EAAQC,GAAjC,OACTA,EAAWJ,IAAWG,EAASD,IAAYD,EAASD,GAAWE,GAGhEG,EAAiB,IACjBC,EAAa,EACbC,EAAe,GACfC,EAAc,GACdC,EAAa,GACbC,EAAiB,GAqFRC,MAnFf,WAAiB,IAAAC,EACeC,mBAAS,CAAEC,MAAO,KADjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNM,EADMH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAEqBP,mBAAShB,EAAYwB,QAF1CC,EAAAN,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENG,EAFMD,EAAA,GAEKE,EAFLF,EAAA,GAIPG,EAAU,WAAuB,IAAAC,GAAAC,UAAAN,OAAA,QAAAO,IAAAD,UAAA,GAAAA,UAAA,GAAP,IAAbE,WAAoB,IAAAH,EAAd,GAAcA,EACnC,GAAKG,EAAIR,UAAUQ,EAAIR,OAAS,GAAhC,CAIA,IAAIS,EAAOZ,EAEPA,EAAOG,OAAShB,IAAmB,IACnCyB,EAAKhB,MAAQI,EAAOJ,MAAMiB,MAAM,EAAGb,EAAOG,OAAShB,IAEvDyB,EAAKhB,MAALE,OAAAgB,EAAA,EAAAhB,CAAiBc,EAAKhB,OAAtBmB,OAAA,CAA6B,CAAEJ,MAAKK,GAAIC,wBACxChB,EAAUW,KAGRM,EAAM,SAACC,EAAQC,GACjBC,MAAMC,UAAUC,QAAQC,KAAKL,EAAQ,SAACR,EAAKc,GACvCC,WAAW,WACPnB,EAAQ,CAAEI,QAENc,IAAMN,EAAOhB,OAAS,GAAKiB,KAC5B,GAAJK,MAYLE,EAAW,WACb,IADmB,IAAAC,EAAA,SACVH,GACLC,WAAW,YAEI,IAAPD,GACAzB,EAAOJ,MAAQ,GACfK,EAAUD,GAbtBM,EAAad,GAEb0B,EAAItC,EAAQ,WACRiD,SAASC,KAAKC,iBAAiB,QAASxB,MAahCD,EAAamB,IAElB,IAAMpB,EAAYoB,KAVhBA,EAAIpB,EAAWoB,IAAM,EAAGA,IAAKG,EAA7BH,IAoBb,OANAO,oBAAU,WACNN,WAAW,WACPR,EAAIvC,EAAagD,IAClB,OACJ,IAGCM,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVpC,EAAOJ,MAAMyC,IAAI,SAAAC,EAAYb,GAAM,IAC5BW,EADYzB,EAAgB2B,EAAhB3B,IAAKK,EAAWsB,EAAXtB,GAErB,GAAIhB,EAAOJ,MAAMO,OAASsB,EAAItC,EAC1B,OAAO,KAGX,IAAMoD,EAAaC,KAAKC,MAAM5D,EAAQ,EAAGM,EAAgB,EAAGC,EAAYqC,IAEpEiB,EAAQ,CACRC,UAAS,cAAA5B,OAAiBU,EAAIpC,EAAgBE,EAArC,mBAAAwB,OAAiEwB,EAAajD,EAA9E,QAOb,OAJIU,EAAOJ,MAAMO,OAASsB,EAAIpB,IAC1B+B,EAAY,UAGTH,EAAAC,EAAAC,cAAA,QAAMC,UAAWA,EAAWzB,IAAKK,EAAI0B,MAAOA,GAAQ/B,QCzF/EiC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAAUjB,SAASkB,eAAe","file":"static/js/main.999e4453.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { uniqueId } from 'lodash';\nimport './style.scss';\n\nconst explanation = 'You can always go forward.     Never back.                    Everything is temporary.       Nothing lasts forever.'\nconst prompt = 'Start typing:                  ';\n\nconst convert = (oldMin, oldMax, newMin, newMax, oldValue) => (\n    (((oldValue - oldMin) * (newMax - newMin)) / (oldMax - oldMin)) + newMin\n);\n\nconst MAX_CHAR_COUNT = 155;\nconst LINE_COUNT = 5;\nconst MAX_PER_LINE = 31;\nconst CHAR_HEIGHT = 40;\nconst CHAR_WIDTH = 17;\nconst FADE_OUT_AFTER = 31;\n\nfunction Typer() {\n    const [stream, setStream] = useState({ chars: [] });\n    const [fadeAfter, setFadeAfter] = useState(explanation.length);\n\n    const useType = ({ key = '' } = {}) => {\n        if (!key.length || key.length > 1) {\n            return;\n        }\n\n        let next = stream;\n\n        if (stream.length % MAX_CHAR_COUNT === 0) {\n            next.chars = stream.chars.slice(0, stream.length - MAX_CHAR_COUNT);\n        }\n        next.chars = [...next.chars, { key, id: uniqueId() }];\n        setStream(next)\n    }\n\n    const say = (phrase, cb) => {\n        Array.prototype.forEach.call(phrase, (key, i) => {\n            setTimeout(() => {\n                useType({ key });\n\n                if (i === phrase.length - 1) { cb(); }\n            }, i * 50);\n        });\n    }\n\n    const showPrompt = () => {\n        setFadeAfter(FADE_OUT_AFTER);\n\n        say(prompt, () => {\n            document.body.addEventListener('keyup', useType);\n        });\n    }\n\n    const clearAll = () => {\n        for (let i = fadeAfter; i >= -1; i--) {\n            setTimeout(() => {\n\n                if (i === -1) {\n                    stream.chars = [];\n                    setStream(stream);\n                    showPrompt();\n                } else {\n                    setFadeAfter(i);\n                }\n            }, 50 * (fadeAfter - i));\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            say(explanation, clearAll);\n        }, 1500);\n    }, []);\n\n    return (\n        <main>\n            <div className=\"content\">\n                {stream.chars.map(({key, id}, i) => {\n                    let className;\n                    if (stream.chars.length - i > MAX_CHAR_COUNT) {\n                        return null;\n                    }\n\n                    const lineNumber = Math.floor(convert(0, MAX_CHAR_COUNT, 0, LINE_COUNT, i));\n\n                    let style = {\n                        transform: `translateX(${(i % MAX_PER_LINE) * CHAR_WIDTH}px) translateY(${lineNumber * CHAR_HEIGHT}px)`\n                    };\n\n                    if (stream.chars.length - i > fadeAfter) {\n                        className = 'hidden'\n                    }\n\n                    return <span className={className} key={id} style={style}>{key}</span>;\n                })}\n            </div>\n        </main>\n    );\n}\n\nexport default Typer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Typer from './components/Typer';\n\nReactDOM.render(<Typer/>, document.getElementById('root'));"],"sourceRoot":""}